# -*- coding: utf-8 -*-
"""Video Game Sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G5r1Zz76d51RRCYzP62hYWzWHPHUhCsm

###Importing necessary libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime

"""###Importing dataset"""

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/Data Analytics Project/vgsales.csv")

data.head()

data.tail()

data.info()

data.describe()

"""###Checking for null values"""

data.duplicated().sum()

data.drop_duplicates(inplace=True)
print(data.duplicated().sum())
data.isnull().sum()

data.shape

data.nunique()

data.isnull().any()

data.isnull().sum()

def num_of_null_val_nd_percentage(df):
    values = data.isnull().sum().sort_values(ascending = False)
    percent = (data.isnull().sum() / data.isnull().count()).sort_values(ascending = False)
    total = pd.concat([values, percent], axis = 1, keys = ['Total Values', 'Percentage'])
    return total
num_of_null_val_nd_percentage(data)

import missingno as msno
msno.bar(data, figsize=(6, 3), color='blue')

data.Genre.value_counts()

cat_col = []
num_col= []
for i in data.columns:
    if data[i].dtype == 'object':
        cat_col.append(i)
    else:
        num_col.append(i)

print("Categorical Columns :", cat_col)
print("Numerical Columns :", num_col)

data.columns

"""### Filling the null values using mean"""

data.Year.fillna(data.Year.median(), inplace = True)

data.isnull().sum()

"""### Dropping the unwanted columns"""

data.drop(['Publisher'], inplace = True, axis = 1)

data.head()

data.isnull().sum()

data.describe(exclude = 'object')

plt.bar(data['Global_Sales'],data['Other_Sales'] )
plt.xlabel('Global_sales')
plt.ylabel('Other_sales')
plt.title('Global_Sales acoording to the Other_Sales')
plt.show()

plt.bar(data['Global_Sales'],data['JP_Sales'] )
plt.xlabel('Global_Sales')
plt.ylabel('JP_Sales')
plt.title('Global_Sales according to the JP_Sales')
plt.show()

plt.bar(data['NA_Sales'],data['EU_Sales'] )
plt.xlabel('NA_Sales')
plt.ylabel('tEU_Sales')
plt.title('NA_Sales according to the EU_Sales')
plt.show()

plt.bar(data['Year'],data['Global_Sales'] )
plt.xlabel('Year')
plt.ylabel('Global_Sales')
plt.title('Yearly Global_Sales')
plt.show()

plt.hist(data['Other_Sales'])

plt.hist(data['Global_Sales'])

sns.scatterplot(data['Global_Sales'])

sns.scatterplot(data['Other_Sales'])

sns.lineplot(x="Year",y="Global_Sales",data=data,ci=None)

sns.lineplot(x="Global_Sales",y="NA_Sales",data=data,ci=None)

sns.relplot(x="Global_Sales",y="JP_Sales",data=data)

sns.relplot(x="Global_Sales",y="EU_Sales",data=data)

sns.relplot(x="Global_Sales",y="NA_Sales",data=data)

sns.pairplot(data,diag_kind='kde')

data.head()

"""#FEATURE EXTRACTION"""

data.head()

x = data.iloc[:,0:9]
x.head()

y = data['Global_Sales']
y.head()

#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
x.Name=le.fit_transform(x.Name)
x.Platform=le.fit_transform(x.Platform)
x.Genre=le.fit_transform(x.Genre)
x.head()

#feature scaling
from sklearn.preprocessing import MinMaxScaler
ms=MinMaxScaler()
x_scaled=pd.DataFrame(ms.fit_transform(x),columns=x.columns)

x_scaled.head()

#Splitting Data into Train and Test.
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""#MACHINE LEARNINIG MODELS

"""

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

lr.fit(x_train,y_train)

pred = lr.predict(x_test)

pred

lr.predict(ms.transform([[1,11007,26,2006.0, 10,41.49,29.02,3.77,8.46]]))

"""####Evaluation Metrics for the LinearRegression Model"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

mae = mean_absolute_error(y_test, pred)
mse = mean_squared_error(y_test, pred)
rmse = mean_squared_error(y_test, pred, squared=False)  # RMSE is the square root of MSE
r2 = r2_score(y_test, pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R-squared:", r2)

from sklearn.tree import DecisionTreeRegressor
dtr = DecisionTreeRegressor()

dtr.fit(x_train,y_train)

y_pred = dtr.predict(x_test)

y_test

dtr.predict(ms.transform([[1,11007,26,2006.0, 10,41.49,29.02,3.77,8.46]]))

"""####Evaluation Metrics for the Decisiontree model"""

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)  # RMSE is the square root of MSE
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R-squared:", r2)

from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
rfr = RandomForestRegressor()

rfr.fit(x_train,y_train)

R_pred = rfr.predict(x_test)

rfr.predict([[1,11007,26,2006.0, 10,41.49,29.02,3.77,8.46]])

"""####Evaluation Metrics for the RandomForest Regressor"""

mae = mean_absolute_error(y_test, R_pred)
mse = mean_squared_error(y_test, R_pred)
rmse = mean_squared_error(y_test, R_pred, squared=False)  # RMSE is the square root of MSE
r2 = r2_score(y_test, R_pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R-squared:", r2)